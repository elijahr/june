
import clang.cindex
# Autogenerated enum class for IDE autocomplete
from enum import Enum
  
class CursorKind(Enum):
  def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, clang.cindex.CursorKind):
        return self.name == other.name
    return NotImplemented
    
  UNEXPOSED_DECL = clang.cindex.CursorKind.from_id(1)
  STRUCT_DECL = clang.cindex.CursorKind.from_id(2)
  UNION_DECL = clang.cindex.CursorKind.from_id(3)
  CLASS_DECL = clang.cindex.CursorKind.from_id(4)
  ENUM_DECL = clang.cindex.CursorKind.from_id(5)
  FIELD_DECL = clang.cindex.CursorKind.from_id(6)
  ENUM_CONSTANT_DECL = clang.cindex.CursorKind.from_id(7)
  FUNCTION_DECL = clang.cindex.CursorKind.from_id(8)
  VAR_DECL = clang.cindex.CursorKind.from_id(9)
  PARM_DECL = clang.cindex.CursorKind.from_id(10)
  OBJC_INTERFACE_DECL = clang.cindex.CursorKind.from_id(11)
  OBJC_CATEGORY_DECL = clang.cindex.CursorKind.from_id(12)
  OBJC_PROTOCOL_DECL = clang.cindex.CursorKind.from_id(13)
  OBJC_PROPERTY_DECL = clang.cindex.CursorKind.from_id(14)
  OBJC_IVAR_DECL = clang.cindex.CursorKind.from_id(15)
  OBJC_INSTANCE_METHOD_DECL = clang.cindex.CursorKind.from_id(16)
  OBJC_CLASS_METHOD_DECL = clang.cindex.CursorKind.from_id(17)
  OBJC_IMPLEMENTATION_DECL = clang.cindex.CursorKind.from_id(18)
  OBJC_CATEGORY_IMPL_DECL = clang.cindex.CursorKind.from_id(19)
  TYPEDEF_DECL = clang.cindex.CursorKind.from_id(20)
  CXX_METHOD = clang.cindex.CursorKind.from_id(21)
  NAMESPACE = clang.cindex.CursorKind.from_id(22)
  LINKAGE_SPEC = clang.cindex.CursorKind.from_id(23)
  CONSTRUCTOR = clang.cindex.CursorKind.from_id(24)
  DESTRUCTOR = clang.cindex.CursorKind.from_id(25)
  CONVERSION_FUNCTION = clang.cindex.CursorKind.from_id(26)
  TEMPLATE_TYPE_PARAMETER = clang.cindex.CursorKind.from_id(27)
  TEMPLATE_NON_TYPE_PARAMETER = clang.cindex.CursorKind.from_id(28)
  TEMPLATE_TEMPLATE_PARAMETER = clang.cindex.CursorKind.from_id(29)
  FUNCTION_TEMPLATE = clang.cindex.CursorKind.from_id(30)
  CLASS_TEMPLATE = clang.cindex.CursorKind.from_id(31)
  CLASS_TEMPLATE_PARTIAL_SPECIALIZATION = clang.cindex.CursorKind.from_id(32)
  NAMESPACE_ALIAS = clang.cindex.CursorKind.from_id(33)
  USING_DIRECTIVE = clang.cindex.CursorKind.from_id(34)
  USING_DECLARATION = clang.cindex.CursorKind.from_id(35)
  TYPE_ALIAS_DECL = clang.cindex.CursorKind.from_id(36)
  OBJC_SYNTHESIZE_DECL = clang.cindex.CursorKind.from_id(37)
  OBJC_DYNAMIC_DECL = clang.cindex.CursorKind.from_id(38)
  CXX_ACCESS_SPEC_DECL = clang.cindex.CursorKind.from_id(39)
  OBJC_SUPER_CLASS_REF = clang.cindex.CursorKind.from_id(40)
  OBJC_PROTOCOL_REF = clang.cindex.CursorKind.from_id(41)
  OBJC_CLASS_REF = clang.cindex.CursorKind.from_id(42)
  TYPE_REF = clang.cindex.CursorKind.from_id(43)
  CXX_BASE_SPECIFIER = clang.cindex.CursorKind.from_id(44)
  TEMPLATE_REF = clang.cindex.CursorKind.from_id(45)
  NAMESPACE_REF = clang.cindex.CursorKind.from_id(46)
  MEMBER_REF = clang.cindex.CursorKind.from_id(47)
  LABEL_REF = clang.cindex.CursorKind.from_id(48)
  OVERLOADED_DECL_REF = clang.cindex.CursorKind.from_id(49)
  VARIABLE_REF = clang.cindex.CursorKind.from_id(50)
  INVALID_FILE = clang.cindex.CursorKind.from_id(70)
  NO_DECL_FOUND = clang.cindex.CursorKind.from_id(71)
  NOT_IMPLEMENTED = clang.cindex.CursorKind.from_id(72)
  INVALID_CODE = clang.cindex.CursorKind.from_id(73)
  UNEXPOSED_EXPR = clang.cindex.CursorKind.from_id(100)
  DECL_REF_EXPR = clang.cindex.CursorKind.from_id(101)
  MEMBER_REF_EXPR = clang.cindex.CursorKind.from_id(102)
  CALL_EXPR = clang.cindex.CursorKind.from_id(103)
  OBJC_MESSAGE_EXPR = clang.cindex.CursorKind.from_id(104)
  BLOCK_EXPR = clang.cindex.CursorKind.from_id(105)
  INTEGER_LITERAL = clang.cindex.CursorKind.from_id(106)
  FLOATING_LITERAL = clang.cindex.CursorKind.from_id(107)
  IMAGINARY_LITERAL = clang.cindex.CursorKind.from_id(108)
  STRING_LITERAL = clang.cindex.CursorKind.from_id(109)
  CHARACTER_LITERAL = clang.cindex.CursorKind.from_id(110)
  PAREN_EXPR = clang.cindex.CursorKind.from_id(111)
  UNARY_OPERATOR = clang.cindex.CursorKind.from_id(112)
  ARRAY_SUBSCRIPT_EXPR = clang.cindex.CursorKind.from_id(113)
  BINARY_OPERATOR = clang.cindex.CursorKind.from_id(114)
  COMPOUND_ASSIGNMENT_OPERATOR = clang.cindex.CursorKind.from_id(115)
  CONDITIONAL_OPERATOR = clang.cindex.CursorKind.from_id(116)
  CSTYLE_CAST_EXPR = clang.cindex.CursorKind.from_id(117)
  COMPOUND_LITERAL_EXPR = clang.cindex.CursorKind.from_id(118)
  INIT_LIST_EXPR = clang.cindex.CursorKind.from_id(119)
  ADDR_LABEL_EXPR = clang.cindex.CursorKind.from_id(120)
  StmtExpr = clang.cindex.CursorKind.from_id(121)
  GENERIC_SELECTION_EXPR = clang.cindex.CursorKind.from_id(122)
  GNU_NULL_EXPR = clang.cindex.CursorKind.from_id(123)
  CXX_STATIC_CAST_EXPR = clang.cindex.CursorKind.from_id(124)
  CXX_DYNAMIC_CAST_EXPR = clang.cindex.CursorKind.from_id(125)
  CXX_REINTERPRET_CAST_EXPR = clang.cindex.CursorKind.from_id(126)
  CXX_CONST_CAST_EXPR = clang.cindex.CursorKind.from_id(127)
  CXX_FUNCTIONAL_CAST_EXPR = clang.cindex.CursorKind.from_id(128)
  CXX_TYPEID_EXPR = clang.cindex.CursorKind.from_id(129)
  CXX_BOOL_LITERAL_EXPR = clang.cindex.CursorKind.from_id(130)
  CXX_NULL_PTR_LITERAL_EXPR = clang.cindex.CursorKind.from_id(131)
  CXX_THIS_EXPR = clang.cindex.CursorKind.from_id(132)
  CXX_THROW_EXPR = clang.cindex.CursorKind.from_id(133)
  CXX_NEW_EXPR = clang.cindex.CursorKind.from_id(134)
  CXX_DELETE_EXPR = clang.cindex.CursorKind.from_id(135)
  CXX_UNARY_EXPR = clang.cindex.CursorKind.from_id(136)
  OBJC_STRING_LITERAL = clang.cindex.CursorKind.from_id(137)
  OBJC_ENCODE_EXPR = clang.cindex.CursorKind.from_id(138)
  OBJC_SELECTOR_EXPR = clang.cindex.CursorKind.from_id(139)
  OBJC_PROTOCOL_EXPR = clang.cindex.CursorKind.from_id(140)
  OBJC_BRIDGE_CAST_EXPR = clang.cindex.CursorKind.from_id(141)
  PACK_EXPANSION_EXPR = clang.cindex.CursorKind.from_id(142)
  SIZE_OF_PACK_EXPR = clang.cindex.CursorKind.from_id(143)
  LAMBDA_EXPR = clang.cindex.CursorKind.from_id(144)
  OBJ_BOOL_LITERAL_EXPR = clang.cindex.CursorKind.from_id(145)
  OBJ_SELF_EXPR = clang.cindex.CursorKind.from_id(146)
  OMP_ARRAY_SECTION_EXPR = clang.cindex.CursorKind.from_id(147)
  OBJC_AVAILABILITY_CHECK_EXPR = clang.cindex.CursorKind.from_id(148)
  UNEXPOSED_STMT = clang.cindex.CursorKind.from_id(200)
  LABEL_STMT = clang.cindex.CursorKind.from_id(201)
  COMPOUND_STMT = clang.cindex.CursorKind.from_id(202)
  CASE_STMT = clang.cindex.CursorKind.from_id(203)
  DEFAULT_STMT = clang.cindex.CursorKind.from_id(204)
  IF_STMT = clang.cindex.CursorKind.from_id(205)
  SWITCH_STMT = clang.cindex.CursorKind.from_id(206)
  WHILE_STMT = clang.cindex.CursorKind.from_id(207)
  DO_STMT = clang.cindex.CursorKind.from_id(208)
  FOR_STMT = clang.cindex.CursorKind.from_id(209)
  GOTO_STMT = clang.cindex.CursorKind.from_id(210)
  INDIRECT_GOTO_STMT = clang.cindex.CursorKind.from_id(211)
  CONTINUE_STMT = clang.cindex.CursorKind.from_id(212)
  BREAK_STMT = clang.cindex.CursorKind.from_id(213)
  RETURN_STMT = clang.cindex.CursorKind.from_id(214)
  ASM_STMT = clang.cindex.CursorKind.from_id(215)
  OBJC_AT_TRY_STMT = clang.cindex.CursorKind.from_id(216)
  OBJC_AT_CATCH_STMT = clang.cindex.CursorKind.from_id(217)
  OBJC_AT_FINALLY_STMT = clang.cindex.CursorKind.from_id(218)
  OBJC_AT_THROW_STMT = clang.cindex.CursorKind.from_id(219)
  OBJC_AT_SYNCHRONIZED_STMT = clang.cindex.CursorKind.from_id(220)
  OBJC_AUTORELEASE_POOL_STMT = clang.cindex.CursorKind.from_id(221)
  OBJC_FOR_COLLECTION_STMT = clang.cindex.CursorKind.from_id(222)
  CXX_CATCH_STMT = clang.cindex.CursorKind.from_id(223)
  CXX_TRY_STMT = clang.cindex.CursorKind.from_id(224)
  CXX_FOR_RANGE_STMT = clang.cindex.CursorKind.from_id(225)
  SEH_TRY_STMT = clang.cindex.CursorKind.from_id(226)
  SEH_EXCEPT_STMT = clang.cindex.CursorKind.from_id(227)
  SEH_FINALLY_STMT = clang.cindex.CursorKind.from_id(228)
  MS_ASM_STMT = clang.cindex.CursorKind.from_id(229)
  NULL_STMT = clang.cindex.CursorKind.from_id(230)
  DECL_STMT = clang.cindex.CursorKind.from_id(231)
  OMP_PARALLEL_DIRECTIVE = clang.cindex.CursorKind.from_id(232)
  OMP_SIMD_DIRECTIVE = clang.cindex.CursorKind.from_id(233)
  OMP_FOR_DIRECTIVE = clang.cindex.CursorKind.from_id(234)
  OMP_SECTIONS_DIRECTIVE = clang.cindex.CursorKind.from_id(235)
  OMP_SECTION_DIRECTIVE = clang.cindex.CursorKind.from_id(236)
  OMP_SINGLE_DIRECTIVE = clang.cindex.CursorKind.from_id(237)
  OMP_PARALLEL_FOR_DIRECTIVE = clang.cindex.CursorKind.from_id(238)
  OMP_PARALLEL_SECTIONS_DIRECTIVE = clang.cindex.CursorKind.from_id(239)
  OMP_TASK_DIRECTIVE = clang.cindex.CursorKind.from_id(240)
  OMP_MASTER_DIRECTIVE = clang.cindex.CursorKind.from_id(241)
  OMP_CRITICAL_DIRECTIVE = clang.cindex.CursorKind.from_id(242)
  OMP_TASKYIELD_DIRECTIVE = clang.cindex.CursorKind.from_id(243)
  OMP_BARRIER_DIRECTIVE = clang.cindex.CursorKind.from_id(244)
  OMP_TASKWAIT_DIRECTIVE = clang.cindex.CursorKind.from_id(245)
  OMP_FLUSH_DIRECTIVE = clang.cindex.CursorKind.from_id(246)
  SEH_LEAVE_STMT = clang.cindex.CursorKind.from_id(247)
  OMP_ORDERED_DIRECTIVE = clang.cindex.CursorKind.from_id(248)
  OMP_ATOMIC_DIRECTIVE = clang.cindex.CursorKind.from_id(249)
  OMP_FOR_SIMD_DIRECTIVE = clang.cindex.CursorKind.from_id(250)
  OMP_PARALLELFORSIMD_DIRECTIVE = clang.cindex.CursorKind.from_id(251)
  OMP_TARGET_DIRECTIVE = clang.cindex.CursorKind.from_id(252)
  OMP_TEAMS_DIRECTIVE = clang.cindex.CursorKind.from_id(253)
  OMP_TASKGROUP_DIRECTIVE = clang.cindex.CursorKind.from_id(254)
  OMP_CANCELLATION_POINT_DIRECTIVE = clang.cindex.CursorKind.from_id(255)
  OMP_CANCEL_DIRECTIVE = clang.cindex.CursorKind.from_id(256)
  OMP_TARGET_DATA_DIRECTIVE = clang.cindex.CursorKind.from_id(257)
  OMP_TASK_LOOP_DIRECTIVE = clang.cindex.CursorKind.from_id(258)
  OMP_TASK_LOOP_SIMD_DIRECTIVE = clang.cindex.CursorKind.from_id(259)
  OMP_DISTRIBUTE_DIRECTIVE = clang.cindex.CursorKind.from_id(260)
  OMP_TARGET_ENTER_DATA_DIRECTIVE = clang.cindex.CursorKind.from_id(261)
  OMP_TARGET_EXIT_DATA_DIRECTIVE = clang.cindex.CursorKind.from_id(262)
  OMP_TARGET_PARALLEL_DIRECTIVE = clang.cindex.CursorKind.from_id(263)
  OMP_TARGET_PARALLELFOR_DIRECTIVE = clang.cindex.CursorKind.from_id(264)
  OMP_TARGET_UPDATE_DIRECTIVE = clang.cindex.CursorKind.from_id(265)
  OMP_DISTRIBUTE_PARALLELFOR_DIRECTIVE = clang.cindex.CursorKind.from_id(266)
  OMP_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE = clang.cindex.CursorKind.from_id(267)
  OMP_DISTRIBUTE_SIMD_DIRECTIVE = clang.cindex.CursorKind.from_id(268)
  OMP_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE = clang.cindex.CursorKind.from_id(269)
  OMP_TARGET_SIMD_DIRECTIVE = clang.cindex.CursorKind.from_id(270)
  OMP_TEAMS_DISTRIBUTE_DIRECTIVE = clang.cindex.CursorKind.from_id(271)
  TRANSLATION_UNIT = clang.cindex.CursorKind.from_id(300)
  UNEXPOSED_ATTR = clang.cindex.CursorKind.from_id(400)
  IB_ACTION_ATTR = clang.cindex.CursorKind.from_id(401)
  IB_OUTLET_ATTR = clang.cindex.CursorKind.from_id(402)
  IB_OUTLET_COLLECTION_ATTR = clang.cindex.CursorKind.from_id(403)
  CXX_FINAL_ATTR = clang.cindex.CursorKind.from_id(404)
  CXX_OVERRIDE_ATTR = clang.cindex.CursorKind.from_id(405)
  ANNOTATE_ATTR = clang.cindex.CursorKind.from_id(406)
  ASM_LABEL_ATTR = clang.cindex.CursorKind.from_id(407)
  PACKED_ATTR = clang.cindex.CursorKind.from_id(408)
  PURE_ATTR = clang.cindex.CursorKind.from_id(409)
  CONST_ATTR = clang.cindex.CursorKind.from_id(410)
  NODUPLICATE_ATTR = clang.cindex.CursorKind.from_id(411)
  CUDACONSTANT_ATTR = clang.cindex.CursorKind.from_id(412)
  CUDADEVICE_ATTR = clang.cindex.CursorKind.from_id(413)
  CUDAGLOBAL_ATTR = clang.cindex.CursorKind.from_id(414)
  CUDAHOST_ATTR = clang.cindex.CursorKind.from_id(415)
  CUDASHARED_ATTR = clang.cindex.CursorKind.from_id(416)
  VISIBILITY_ATTR = clang.cindex.CursorKind.from_id(417)
  DLLEXPORT_ATTR = clang.cindex.CursorKind.from_id(418)
  DLLIMPORT_ATTR = clang.cindex.CursorKind.from_id(419)
  CONVERGENT_ATTR = clang.cindex.CursorKind.from_id(438)
  WARN_UNUSED_ATTR = clang.cindex.CursorKind.from_id(439)
  WARN_UNUSED_RESULT_ATTR = clang.cindex.CursorKind.from_id(440)
  ALIGNED_ATTR = clang.cindex.CursorKind.from_id(441)
  PREPROCESSING_DIRECTIVE = clang.cindex.CursorKind.from_id(500)
  MACRO_DEFINITION = clang.cindex.CursorKind.from_id(501)
  MACRO_INSTANTIATION = clang.cindex.CursorKind.from_id(502)
  INCLUSION_DIRECTIVE = clang.cindex.CursorKind.from_id(503)
  MODULE_IMPORT_DECL = clang.cindex.CursorKind.from_id(600)
  TYPE_ALIAS_TEMPLATE_DECL = clang.cindex.CursorKind.from_id(601)
  STATIC_ASSERT = clang.cindex.CursorKind.from_id(602)
  FRIEND_DECL = clang.cindex.CursorKind.from_id(603)
  OVERLOAD_CANDIDATE = clang.cindex.CursorKind.from_id(700)

class TemplateArgumentKind(Enum):
  def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, clang.cindex.TemplateArgumentKind):
        return self.name == other.name
    return NotImplemented
    
  NULL = clang.cindex.TemplateArgumentKind.from_id(0)
  TYPE = clang.cindex.TemplateArgumentKind.from_id(1)
  DECLARATION = clang.cindex.TemplateArgumentKind.from_id(2)
  NULLPTR = clang.cindex.TemplateArgumentKind.from_id(3)
  INTEGRAL = clang.cindex.TemplateArgumentKind.from_id(4)

class ExceptionSpecificationKind(Enum):
  def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, clang.cindex.ExceptionSpecificationKind):
        return self.name == other.name
    return NotImplemented
    
  NONE = clang.cindex.ExceptionSpecificationKind.from_id(0)
  DYNAMIC_NONE = clang.cindex.ExceptionSpecificationKind.from_id(1)
  DYNAMIC = clang.cindex.ExceptionSpecificationKind.from_id(2)
  MS_ANY = clang.cindex.ExceptionSpecificationKind.from_id(3)
  BASIC_NOEXCEPT = clang.cindex.ExceptionSpecificationKind.from_id(4)
  COMPUTED_NOEXCEPT = clang.cindex.ExceptionSpecificationKind.from_id(5)
  UNEVALUATED = clang.cindex.ExceptionSpecificationKind.from_id(6)
  UNINSTANTIATED = clang.cindex.ExceptionSpecificationKind.from_id(7)
  UNPARSED = clang.cindex.ExceptionSpecificationKind.from_id(8)

class AvailabilityKind(Enum):
  def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, clang.cindex.AvailabilityKind):
        return self.name == other.name
    return NotImplemented
    
  AVAILABLE = clang.cindex.AvailabilityKind.from_id(0)
  DEPRECATED = clang.cindex.AvailabilityKind.from_id(1)
  NOT_AVAILABLE = clang.cindex.AvailabilityKind.from_id(2)
  NOT_ACCESSIBLE = clang.cindex.AvailabilityKind.from_id(3)

class AccessSpecifier(Enum):
  def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, clang.cindex.AccessSpecifier):
        return self.name == other.name
    return NotImplemented
    
  INVALID = clang.cindex.AccessSpecifier.from_id(0)
  PUBLIC = clang.cindex.AccessSpecifier.from_id(1)
  PROTECTED = clang.cindex.AccessSpecifier.from_id(2)
  PRIVATE = clang.cindex.AccessSpecifier.from_id(3)
  NONE = clang.cindex.AccessSpecifier.from_id(4)

class TypeKind(Enum):
  def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, clang.cindex.TypeKind):
        return self.name == other.name
    return NotImplemented
    
  INVALID = clang.cindex.TypeKind.from_id(0)
  UNEXPOSED = clang.cindex.TypeKind.from_id(1)
  VOID = clang.cindex.TypeKind.from_id(2)
  BOOL = clang.cindex.TypeKind.from_id(3)
  CHAR_U = clang.cindex.TypeKind.from_id(4)
  UCHAR = clang.cindex.TypeKind.from_id(5)
  CHAR16 = clang.cindex.TypeKind.from_id(6)
  CHAR32 = clang.cindex.TypeKind.from_id(7)
  USHORT = clang.cindex.TypeKind.from_id(8)
  UINT = clang.cindex.TypeKind.from_id(9)
  ULONG = clang.cindex.TypeKind.from_id(10)
  ULONGLONG = clang.cindex.TypeKind.from_id(11)
  UINT128 = clang.cindex.TypeKind.from_id(12)
  CHAR_S = clang.cindex.TypeKind.from_id(13)
  SCHAR = clang.cindex.TypeKind.from_id(14)
  WCHAR = clang.cindex.TypeKind.from_id(15)
  SHORT = clang.cindex.TypeKind.from_id(16)
  INT = clang.cindex.TypeKind.from_id(17)
  LONG = clang.cindex.TypeKind.from_id(18)
  LONGLONG = clang.cindex.TypeKind.from_id(19)
  INT128 = clang.cindex.TypeKind.from_id(20)
  FLOAT = clang.cindex.TypeKind.from_id(21)
  DOUBLE = clang.cindex.TypeKind.from_id(22)
  LONGDOUBLE = clang.cindex.TypeKind.from_id(23)
  NULLPTR = clang.cindex.TypeKind.from_id(24)
  OVERLOAD = clang.cindex.TypeKind.from_id(25)
  DEPENDENT = clang.cindex.TypeKind.from_id(26)
  OBJCID = clang.cindex.TypeKind.from_id(27)
  OBJCCLASS = clang.cindex.TypeKind.from_id(28)
  OBJCSEL = clang.cindex.TypeKind.from_id(29)
  FLOAT128 = clang.cindex.TypeKind.from_id(30)
  HALF = clang.cindex.TypeKind.from_id(31)
  COMPLEX = clang.cindex.TypeKind.from_id(100)
  POINTER = clang.cindex.TypeKind.from_id(101)
  BLOCKPOINTER = clang.cindex.TypeKind.from_id(102)
  LVALUEREFERENCE = clang.cindex.TypeKind.from_id(103)
  RVALUEREFERENCE = clang.cindex.TypeKind.from_id(104)
  RECORD = clang.cindex.TypeKind.from_id(105)
  ENUM = clang.cindex.TypeKind.from_id(106)
  TYPEDEF = clang.cindex.TypeKind.from_id(107)
  OBJCINTERFACE = clang.cindex.TypeKind.from_id(108)
  OBJCOBJECTPOINTER = clang.cindex.TypeKind.from_id(109)
  FUNCTIONNOPROTO = clang.cindex.TypeKind.from_id(110)
  FUNCTIONPROTO = clang.cindex.TypeKind.from_id(111)
  CONSTANTARRAY = clang.cindex.TypeKind.from_id(112)
  VECTOR = clang.cindex.TypeKind.from_id(113)
  INCOMPLETEARRAY = clang.cindex.TypeKind.from_id(114)
  VARIABLEARRAY = clang.cindex.TypeKind.from_id(115)
  DEPENDENTSIZEDARRAY = clang.cindex.TypeKind.from_id(116)
  MEMBERPOINTER = clang.cindex.TypeKind.from_id(117)
  AUTO = clang.cindex.TypeKind.from_id(118)
  ELABORATED = clang.cindex.TypeKind.from_id(119)
  PIPE = clang.cindex.TypeKind.from_id(120)
  OCLIMAGE1DRO = clang.cindex.TypeKind.from_id(121)
  OCLIMAGE1DARRAYRO = clang.cindex.TypeKind.from_id(122)
  OCLIMAGE1DBUFFERRO = clang.cindex.TypeKind.from_id(123)
  OCLIMAGE2DRO = clang.cindex.TypeKind.from_id(124)
  OCLIMAGE2DARRAYRO = clang.cindex.TypeKind.from_id(125)
  OCLIMAGE2DDEPTHRO = clang.cindex.TypeKind.from_id(126)
  OCLIMAGE2DARRAYDEPTHRO = clang.cindex.TypeKind.from_id(127)
  OCLIMAGE2DMSAARO = clang.cindex.TypeKind.from_id(128)
  OCLIMAGE2DARRAYMSAARO = clang.cindex.TypeKind.from_id(129)
  OCLIMAGE2DMSAADEPTHRO = clang.cindex.TypeKind.from_id(130)
  OCLIMAGE2DARRAYMSAADEPTHRO = clang.cindex.TypeKind.from_id(131)
  OCLIMAGE3DRO = clang.cindex.TypeKind.from_id(132)
  OCLIMAGE1DWO = clang.cindex.TypeKind.from_id(133)
  OCLIMAGE1DARRAYWO = clang.cindex.TypeKind.from_id(134)
  OCLIMAGE1DBUFFERWO = clang.cindex.TypeKind.from_id(135)
  OCLIMAGE2DWO = clang.cindex.TypeKind.from_id(136)
  OCLIMAGE2DARRAYWO = clang.cindex.TypeKind.from_id(137)
  OCLIMAGE2DDEPTHWO = clang.cindex.TypeKind.from_id(138)
  OCLIMAGE2DARRAYDEPTHWO = clang.cindex.TypeKind.from_id(139)
  OCLIMAGE2DMSAAWO = clang.cindex.TypeKind.from_id(140)
  OCLIMAGE2DARRAYMSAAWO = clang.cindex.TypeKind.from_id(141)
  OCLIMAGE2DMSAADEPTHWO = clang.cindex.TypeKind.from_id(142)
  OCLIMAGE2DARRAYMSAADEPTHWO = clang.cindex.TypeKind.from_id(143)
  OCLIMAGE3DWO = clang.cindex.TypeKind.from_id(144)
  OCLIMAGE1DRW = clang.cindex.TypeKind.from_id(145)
  OCLIMAGE1DARRAYRW = clang.cindex.TypeKind.from_id(146)
  OCLIMAGE1DBUFFERRW = clang.cindex.TypeKind.from_id(147)
  OCLIMAGE2DRW = clang.cindex.TypeKind.from_id(148)
  OCLIMAGE2DARRAYRW = clang.cindex.TypeKind.from_id(149)
  OCLIMAGE2DDEPTHRW = clang.cindex.TypeKind.from_id(150)
  OCLIMAGE2DARRAYDEPTHRW = clang.cindex.TypeKind.from_id(151)
  OCLIMAGE2DMSAARW = clang.cindex.TypeKind.from_id(152)
  OCLIMAGE2DARRAYMSAARW = clang.cindex.TypeKind.from_id(153)
  OCLIMAGE2DMSAADEPTHRW = clang.cindex.TypeKind.from_id(154)
  OCLIMAGE2DARRAYMSAADEPTHRW = clang.cindex.TypeKind.from_id(155)
  OCLIMAGE3DRW = clang.cindex.TypeKind.from_id(156)
  OCLSAMPLER = clang.cindex.TypeKind.from_id(157)
  OCLEVENT = clang.cindex.TypeKind.from_id(158)
  OCLQUEUE = clang.cindex.TypeKind.from_id(159)
  OCLRESERVEID = clang.cindex.TypeKind.from_id(160)
  EXTVECTOR = clang.cindex.TypeKind.from_id(176)
  ATOMIC = clang.cindex.TypeKind.from_id(177)

class RefQualifierKind(Enum):
  def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, clang.cindex.RefQualifierKind):
        return self.name == other.name
    return NotImplemented
    
  NONE = clang.cindex.RefQualifierKind.from_id(0)
  LVALUE = clang.cindex.RefQualifierKind.from_id(1)
  RVALUE = clang.cindex.RefQualifierKind.from_id(2)

class LinkageKind(Enum):
  def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, clang.cindex.LinkageKind):
        return self.name == other.name
    return NotImplemented
    
  INVALID = clang.cindex.LinkageKind.from_id(0)
  NO_LINKAGE = clang.cindex.LinkageKind.from_id(1)
  INTERNAL = clang.cindex.LinkageKind.from_id(2)
  UNIQUE_EXTERNAL = clang.cindex.LinkageKind.from_id(3)
  EXTERNAL = clang.cindex.LinkageKind.from_id(4)

class TLSKind(Enum):
  def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, clang.cindex.TLSKind):
        return self.name == other.name
    return NotImplemented
    
  NONE = clang.cindex.TLSKind.from_id(0)
  DYNAMIC = clang.cindex.TLSKind.from_id(1)
  STATIC = clang.cindex.TLSKind.from_id(2)
